Stereotype Annotations in the Spring Framework:
Stereotype annotations in Spring, such as @Component, @Service, @Repository, and @Controller, are used to indicate the roles of the annotated classes. They help in auto-detection and auto-configuration, allowing Spring to recognize and manage these components during the application's context initialization. For example, @Service is often used for service classes, and @Repository for data access components.
12. Defining a Bean in the Spring Framework:
In Spring, a bean is a managed object that is created, configured, and managed by the Spring IoC (Inversion of Control) container. To define a bean, you can use annotations like @Component or XML configurations. For example, using @Component on a class or defining a bean in XML with <bean> tag.
13. Dependency Injection:
Dependency Injection (DI) is a design pattern in which the objects are given their dependencies rather than creating or finding them. Spring supports DI by injecting dependencies into the beans at runtime, reducing tight coupling between components and making the application more maintainable and testable.
14. Ways to Perform Dependency Injection in Spring/Spring Boot:
There are three main ways to perform dependency injection in Spring/Spring Boot:
Constructor Injection
Setter Injection
Method Injection
15. Choosing Between Setter and Constructor Injection:
Constructor Injection: Suitable for mandatory dependencies, immutable classes, and resolving circular dependencies.
Setter Injection: Optional dependencies, non-immutable classes, and when circular dependencies are not an issue.
16. Real-world Example of @PostConstruct:
@PostConstruct is used for methods that need to be executed after dependency injection and bean initialization. A real-world example is initializing resources like database connections or setting up configurations once the bean is constructed.
17. Dynamically Loading Values in Spring Boot Application (@Value):
@Value annotation in Spring Boot allows dynamic loading of values from property files or environment variables. For example, @Value("${property.name}") injects the value of property.name into a field or method parameter.
18. Difference Between YML and Properties Files:
Syntax & Structure: YML uses indentation, while properties use key-value pairs.
Hierarchy: YML supports nested structures more naturally.
Lists/Arrays: YML allows lists and arrays more intuitively.
Complex Data Types: YML supports complex data types.
Readability: YML is generally considered more readable.
19. Difference Between YML and YAML:
YML is a file extension often used interchangeably with YAML. YAML is a human-readable data serialization format.
20. Configuration Priority Between Properties and YAML:
If the same configuration is present in both properties and YAML files, the YAML values will take precedence in a Spring Boot application.
21. Loading External Properties in Spring Boot:
Use spring.config.import property in application.properties to specify an external configuration file's location, like spring.config.import=file:/c:/nitesh/downloads/test.txt.
22. Mapping/Binding Config Properties to Java Object:
Use @ConfigurationProperties annotation on a class and bind properties using the application.properties or application.yml file.
23. Resolving Bean Dependency Ambiguity:
Use @Qualifier annotation to specify which bean to inject when there are multiple candidates.
24. Avoiding Dependency Ambiguity Without @Qualifier:
Use different names for beans to avoid ambiguity, or use primary beans using @Primary annotation.
25. Bean Scope and Types:
Bean scope defines the lifecycle of a bean. Common scopes are Singleton, Prototype, Request, Session, and Custom scopes.
26. Defining Custom Bean Scope:
Implement the org.springframework.beans.factory.config.Scope interface to create a custom bean scope.
27. Real-time Use Case for Singleton & Prototype Scope:
Singleton: Configuration classes, service classes.
Prototype: Stateful beans, where a new instance is required for each use.
28. Injecting Prototype Bean in Singleton Bean:
Yes, you can inject a prototype bean into a singleton bean. However, each invocation will still get the same instance of the prototype bean.
29. Difference Between Spring Singleton and Plain Singleton:
Spring Singleton is managed by the Spring IoC container, providing additional features. Plain Singleton refers to traditional singleton patterns without Spring's management.
30. Purpose of BeanPostProcessor Interface:
BeanPostProcessor allows customization of bean initialization and destruction. It provides hooks to execute custom logic before and after bean instantiation.
31-43. RESTful Web Services:
HTTP Methods:
GET
POST
PUT
DELETE
PATCH
PathVariable vs. RequestParam:
@PathVariable: Extracts values from the URI path.
@RequestParam: Extracts values from query parameters.
@RestController vs. @Controller:
@RestController: Combines @Controller and @ResponseBody, used for RESTful APIs.
@Controller: Used for MVC controllers.
Deserializing JSON Request Payload in Spring MVC:
Use @RequestBody annotation on a method parameter to deserialize JSON request payload into an object.
Update Operations in POST HTTP Method:
Yes, you can perform update operations using the POST method, but it is semantically more appropriate to use PUT for updates.
Getting Request Body in GET HTTP Method:
No, in RESTful principles, the request body in a GET method is not used. Data is usually passed through query parameters.
Content Negotiation in REST Endpoint:
Use @RequestMapping with produces attribute to specify content types. Alternatively, use @RestController with @GetMapping or @PostMapping and produces attribute.
HTTP Status Codes:
Use appropriate HTTP status codes such as 200 OK, 201 Created, 204 No Content, 400 Bad Request, 404 Not Found, etc.
Enabling Cross-Origin:
Use @CrossOrigin annotation or configure it globally in Java-based config.
File Upload in Spring:
Use @RequestParam("file") MultipartFile file as a parameter in the controller method to handle file uploads.
API Versioning:
Use URI versioning, custom request headers, or request parameters for versioning.
API Documentation:
Use tools like Swagger or Springfox for automatic API documentation.
Hiding REST Endpoints:
Use @RequestMapping with hidden = true or use security configurations to restrict access to certain endpoints.
